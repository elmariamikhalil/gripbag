<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="theme-color" content="{{ settings.colors_accent }}">
    <link rel="canonical" href="{{ canonical_url }}">
    <link rel="preconnect" href="https://cdn.shopify.com" crossorigin>

    {%- if settings.favicon != blank -%}
      <link rel="icon" type="image/png" href="{{ settings.favicon | img_url: '32x32' }}">
    {%- endif -%}

    {%- unless settings.type_header_font.system? and settings.type_body_font.system? -%}
      <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
    {%- endunless -%}

    <title>
      {{ page_title }}
      {%- if current_tags %} &ndash; tagged "{{ current_tags | join: ', ' }}"{% endif -%}
      {%- if current_page != 1 %} &ndash; Page {{ current_page }}{% endif -%}
      {%- unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless -%}
    </title>

    {% if page_description %}
      <meta name="description" content="{{ page_description | escape }}">
    {% endif %}

    {% render 'meta-tags' %}

    <script src="{{ 'global.js' | asset_url }}" defer="defer"></script>
    {{ content_for_header }}

    {%- liquid
      assign body_font_bold = settings.type_body_font | font_modify: 'weight', 'bold'
      assign body_font_italic = settings.type_body_font | font_modify: 'style', 'italic'
      assign body_font_bold_italic = body_font_bold | font_modify: 'style', 'italic'
    %}

    {% style %}
      {{ settings.type_body_font | font_face: font_display: 'swap' }}
      {{ body_font_bold | font_face: font_display: 'swap' }}
      {{ body_font_italic | font_face: font_display: 'swap' }}
      {{ body_font_bold_italic | font_face: font_display: 'swap' }}
      {{ settings.type_header_font | font_face: font_display: 'swap' }}

      :root {
        --font-body-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
        --font-body-style: {{ settings.type_body_font.style }};
        --font-body-weight: {{ settings.type_body_font.weight }};
        --font-body-scale: 1;
        
        --font-heading-family: {{ settings.type_header_font.family }}, {{ settings.type_header_font.fallback_families }};
        --font-heading-style: {{ settings.type_header_font.style }};
        --font-heading-weight: {{ settings.type_header_font.weight }};

        --color-primary: {{ settings.colors_accent | default: '#00D4FF' }};
        --color-primary-hover: {{ settings.colors_accent | default: '#00D4FF' | color_darken: 10 }};
        --color-text: {{ settings.colors_text | default: '#2d2d2d' }};
        --color-background: {{ settings.colors_background | default: '#ffffff' }};
        --color-dark: #1a1a1a;
        --color-light-bg: #f9fafb;
        --color-gray: #6b7280;
        --border-radius: 12px;
        --transition: all 0.3s ease;
      }

      *,
      *::before,
      *::after {
        box-sizing: inherit;
      }

      html {
        box-sizing: border-box;
        font-size: calc(var(--font-body-scale) * 62.5%);
        height: 100%;
      }

      body {
        display: grid;
        grid-template-rows: auto auto 1fr auto;
        grid-template-columns: 100%;
        min-height: 100%;
        margin: 0;
        font-size: 1.5rem;
        letter-spacing: 0.06rem;
        line-height: calc(1 + 0.8 / var(--font-body-scale));
        font-family: var(--font-body-family);
        font-style: var(--font-body-style);
        font-weight: var(--font-body-weight);
        background: var(--color-background);
        color: var(--color-text);
      }

      @media screen and (min-width: 750px) {
        body {
          font-size: 1.6rem;
        }
      }

      /* Section utility classes */
      .section-heading {
        font-size: clamp(2rem, 5vw, 3rem);
        font-weight: 800;
        margin-bottom: 15px;
        color: var(--color-dark);
        line-height: 1.2;
      }

      .section-subheading {
        font-size: 18px;
        color: var(--color-gray);
        line-height: 1.6;
        max-width: 700px;
        margin: 0 auto;
      }

      /* Product Grid */
      .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 30px;
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 40px;
      }

      @media (max-width: 768px) {
        .product-grid {
          grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
          gap: 20px;
          padding: 0 20px;
        }
      }
    {% endstyle %}

    {{ 'base.css' | asset_url | stylesheet_tag }}
    
    {%- unless settings.type_body_font.system? -%}
      <link rel="preload" as="font" href="{{ settings.type_body_font | font_url }}" type="font/woff2" crossorigin>
    {%- endunless -%}
    {%- unless settings.type_header_font.system? -%}
      <link rel="preload" as="font" href="{{ settings.type_header_font | font_url }}" type="font/woff2" crossorigin>
    {%- endunless -%}

    <script>document.documentElement.className = document.documentElement.className.replace('no-js', 'js');</script>
  </head>

  <body class="template-{{ template.name }}">
    <a class="skip-to-content btn btn--primary" href="#MainContent">
      Skip to content
    </a>

    {% sections 'header-group' %}

    <main id="MainContent" class="content-for-layout focus-none" role="main" tabindex="-1">
      {{ content_for_layout }}
    </main>

    {% sections 'footer-group' %}

    <!-- Cart Drawer -->
    {% render 'cart-drawer' %}

    <ul hidden>
      <li id="a11y-refresh-page-message">Choosing a selection results in a full page refresh.</li>
    </ul>

    <script>
      window.shopUrl = '{{ shop.url }}';
      window.routes = {
        cart_add_url: '{{ routes.cart_add_url }}',
        cart_change_url: '{{ routes.cart_change_url }}',
        cart_update_url: '{{ routes.cart_update_url }}',
        predictive_search_url: '{{ routes.predictive_search_url }}'
      };

      window.cartStrings = {
        error: 'There was an error while updating your cart. Please try again.',
        quantityError: 'You can only add [quantity] of this item to your cart.'
      }

      window.variantStrings = {
        addToCart: 'Add to cart',
        soldOut: 'Sold out',
        unavailable: 'Unavailable'
      }

      // Cart drawer functionality
      document.addEventListener('DOMContentLoaded', function() {
        const cartTriggers = document.querySelectorAll('[data-cart-trigger]');
        const cartDrawer = document.getElementById('cart-drawer');
        const overlay = cartDrawer?.querySelector('.cart-drawer__overlay');
        const closeBtn = cartDrawer?.querySelector('.cart-drawer__close');
        
        // Open cart drawer
        cartTriggers.forEach(trigger => {
          trigger.addEventListener('click', (e) => {
            e.preventDefault();
            if (cartDrawer) {
              cartDrawer.classList.add('active');
              document.body.style.overflow = 'hidden';
            }
          });
        });
        
        // Close cart drawer
        function closeCart() {
          if (cartDrawer) {
            cartDrawer.classList.remove('active');
            document.body.style.overflow = '';
          }
        }

        if (overlay) {
          overlay.addEventListener('click', closeCart);
        }
        
        if (closeBtn) {
          closeBtn.addEventListener('click', closeCart);
        }

        // Update cart item quantity
        window.updateCartItem = function(input) {
          const line = input.dataset.line;
          const quantity = parseInt(input.value);
          
          if (quantity < 1) {
            if (confirm('Remove this item from cart?')) {
              input.value = 0;
            } else {
              input.value = 1;
              return;
            }
          }

          fetch('/cart/change.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              line: line,
              quantity: quantity
            })
          })
          .then(response => response.json())
          .then(data => {
            location.reload(); // Reload to update cart
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error updating cart. Please try again.');
          });
        };

        // Add to cart functionality
        const addToCartForms = document.querySelectorAll('form[action="/cart/add"]');
        addToCartForms.forEach(form => {
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(form);
            const button = form.querySelector('button[type="submit"]');
            const originalText = button.textContent;
            
            button.disabled = true;
            button.textContent = 'Adding...';
            
            try {
              const response = await fetch('/cart/add.js', {
                method: 'POST',
                body: formData
              });
              
              const data = await response.json();
              
              if (response.ok) {
                // Update cart count
                const cartCount = document.querySelectorAll('.cart-count');
                cartCount.forEach(el => {
                  const currentCount = parseInt(el.textContent) || 0;
                  el.textContent = currentCount + parseInt(formData.get('quantity') || 1);
                });
                
                // Open cart drawer
                if (cartDrawer) {
                  cartDrawer.classList.add('active');
                  document.body.style.overflow = 'hidden';
                  
                  // Reload cart drawer content
                  setTimeout(() => {
                    location.reload();
                  }, 500);
                }
                
                button.textContent = 'Added!';
                setTimeout(() => {
                  button.textContent = originalText;
                  button.disabled = false;
                }, 1000);
              } else {
                throw new Error(data.description || 'Error adding to cart');
              }
            } catch (error) {
              console.error('Error:', error);
              alert(error.message || 'Error adding item to cart');
              button.textContent = originalText;
              button.disabled = false;
            }
          });
        });
      });
    </script>

    {%- if settings.predictive_search_enabled -%}
      <script src="{{ 'predictive-search.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}
  </body>
</html>